<?xml version="1.0" encoding="UTF-8"?>
<ctl:package xmlns:ctl="http://www.occamlab.com/ctl"
   xmlns:ctlp="http://www.occamlab.com/te/parsers" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
   xmlns:fn="http://www.w3.org/2005/02/xpath-functions" xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:saxon="http://saxon.sf.net/"
   xmlns:tep="http://teamengine.sourceforge.net/parsers" xmlns:wcs="http://schemas.opengis.net/wcs/1.1.1"
   xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:xsd="http://www.w3.org/2001/XMLSchema">
   
   <ctl:test xmlns="" name="wcs:GetCoverage-main" isConformanceClass="true" isBasic="true">
      <ctl:param name="Capabilities"/>
      <ctl:assertion>All assertions for "GetCoverage" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the GetCoverage module.</ctl:comment>
      <ctl:link xmlns="" title="3. WCS-GetCoverage">http://www.opengeospatial.org/standards/wcs#GetCoverage</ctl:link>
      <ctl:code>
        <ctl:comment>From the GetCapabilities, which http methods are supported and what are their URLs</ctl:comment>
        <xsl:variable name="url">
             <xsl:value-of select="$Capabilities//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Get/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="result1">
          <ctl:request>
            <ctl:url>
              <xsl:value-of select="$url"/>
            </ctl:url>
            <ctl:method>GET</ctl:method>
            <ctl:param name="service">WCS</ctl:param>
            <ctl:param name="request">GetCapabilities</ctl:param>
            <ctl:param name="AcceptVersions">1.1.1</ctl:param>
            <ctl:param name="sections">OperationsMetadata,Contents</ctl:param>
            <ctlp:XMLValidatingParser>
              <ctlp:schemas>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsGetCapabilities.xsd</ctlp:schema>
                <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsGetCapabilities.xsd</ctlp:schema>
              </ctlp:schemas>
            </ctlp:XMLValidatingParser>
          </ctl:request>
        </xsl:variable>
        <xsl:variable name="version-number" select="$result1/*[local-name()='Capabilities'][@version]/@version"/>
        <xsl:choose>
          <xsl:when test="$version-number = '1.1.1'">
            <ctl:message select="concat('The service metadata document version number is ', $version-number, '.')"/>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:message select="concat('The service metadata document has version ', $version-number, ' but expected to find 1.1.1 as the highest protocol supported. See OGC 06-121r3 subclause 7.3.2.')"/>
            <ctl:message select="concat('&#xA;', ' ')"/>
            <ctl:fail/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="EqualUpdateSequenceValue">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'][@updateSequence]/@updateSequence"/>
        </xsl:variable>
        <xsl:variable name="http-get">GET</xsl:variable>
        <xsl:variable name="http-xml">XML</xsl:variable>
        <xsl:variable name="http-soap">SOAP</xsl:variable>
        <xsl:variable name="url-get">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Get']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="url-xml">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/@xlink:href"/>
        </xsl:variable>
        <xsl:variable name="xml-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="xml-supported-alternate">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='XML'"/>
        </xsl:variable>
        <xsl:variable name="soap-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='DCP']/*[local-name()='HTTP']/*[local-name()='Post']/*[local-name()='Constraint'][@name='PostEncoding']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='SOAP'"/>
        </xsl:variable>
        <xsl:variable name="store-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities']/*[local-name()='OperationsMetadata']/*[@name='GetCoverage']/*[local-name()='Parameter'][@name='store']/*[local-name()='AllowedValues']/*[local-name()='Value']/text()='True'"/>
        </xsl:variable>
        <xsl:variable name="sections-supported">
          <xsl:value-of select="$result1/*[local-name()='Capabilities'] and not($result1/*[local-name()='Capabilities']/*[local-name()='ServiceProvider'])"/>
        </xsl:variable>
        <xsl:variable name="identifier1">
          <ctl:call-function name="wcs:select-identifier">
            <ctl:with-param name="result1" select="$result1"/>
            <ctl:with-param name="identifier_no" select="1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:if test="string-length($version-number) = 0 and string-length($url-get) = 0 and string-length($identifier1) = 0">
          <ctl:message>The server seems to have a problem with handling the GetCapabilities sections parameter. No tests will be performed.</ctl:message>
          <ctl:fail/>
        </xsl:if>
        <ctl:message select="concat('The URL for KVP encoding is ', $url-get, '.')"/>
        <ctl:message select="concat('The URL for XML encoding is ', $url-xml, '.')"/>
        <xsl:choose>
          <xsl:when test="$xml-supported = 'true' or $xml-supported-alternate = 'true'">
            <ctl:message>XML encoding is supported.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message>XML encoding is not supported.</ctl:message>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:if test="$soap-supported = 'true'">
          <ctl:message>No tests using SOAP encoding will be performed. The tests for SOAP encoding are not implemented.</ctl:message>
        </xsl:if>
        <ctl:message select="concat('store supported is ', $store-supported = 'true', '.')"/>
        <ctl:message select="concat('Identifier1 is ', $identifier1, '.')"/>
        <xsl:variable name="MinimalUpdateSequenceValue">0</xsl:variable>
        <xsl:variable name="MaximalUpdateSequenceValue">0</xsl:variable>
        <xsl:variable name="BogusUpdateSequenceValue">0</xsl:variable>
        <ctl:comment>Call the test for each applicable http method with its appropriate URL</ctl:comment>
        <xsl:if test="string-length($version-number) != 0 or string-length($url-get) != 0 or string-length($identifier1) != 0">
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MinimalRequest', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MinimalRequest', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MinimalRequest', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MinimalRequest">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MinimalRequest', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MinimalRequest">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MinimalRequest', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MissingIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MissingIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MissingIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('EmptyIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('EmptyIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('EmptyIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'EmptyIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'EmptyIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('BogusIdentifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('BogusIdentifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('BogusIdentifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BogusIdentifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BogusIdentifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('MissingBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('MissingBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('MissingBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'MissingBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('SurroundingBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('SurroundingBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('SurroundingBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'SurroundingBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'SurroundingBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('InsideBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('InsideBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('InsideBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'InsideBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'InsideBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('OverlappingBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('OverlappingBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('OverlappingBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OverlappingBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OverlappingBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('BoundingBox_OutOfRangeCoordinates', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('BoundingBox_OutOfRangeCoordinates', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('BoundingBox_OutOfRangeCoordinates', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <!-- The test removed with reference to issue #45. -->
          <!-- <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BoundingBox_OutOfRangeCoordinates', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'BoundingBox_OutOfRangeCoordinates', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose> -->
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('OutsideBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('OutsideBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('OutsideBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OutsideBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'OutsideBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('AntimeridianBoundingBox', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('AntimeridianBoundingBox', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('AntimeridianBoundingBox', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'AntimeridianBoundingBox', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'AntimeridianBoundingBox', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePosition', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePosition', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePosition', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePosition_Early', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePosition_Early', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePosition_Early', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Early', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Early', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePosition_Late', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePosition_Late', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePosition_Late', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Late', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePosition_Late', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_With_Resolution', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_With_Resolution_And_Frame', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution_And_Frame', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_With_Resolution_And_Frame', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution_And_Frame', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_With_Resolution_And_Frame', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_BeginTime_Only', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_BeginTime_Only', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_BeginTime_Only', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_BeginTime_Only', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_BeginTime_Only', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('TemporalSubset_TimePeriod_EndTime_Only', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('TemporalSubset_TimePeriod_EndTime_Only', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('TemporalSubset_TimePeriod_EndTime_Only', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']) = 0)"/>
          </xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_EndTime_Only', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'TemporalSubset_TimePeriod_EndTime_Only', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Identifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Multiple_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Multiple_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Multiple_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]) = 0)"/>
          </xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Multiple_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Multiple_Identifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Repeated_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Repeated_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Repeated_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Repeated_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Repeated_Identifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Bogus_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Bogus_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Bogus_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Bogus_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Bogus_Identifier', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Valid_With_Bogus_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Valid_With_Bogus_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Valid_With_Bogus_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Valid_With_Bogus_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Valid_With_Bogus_Identifiers', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_InterpolationMethod', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_InterpolationMethod', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_InterpolationMethod', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_InterpolationMethod_Missing', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Missing', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Missing', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Missing', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Missing', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_InterpolationMethod_Bogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Bogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_InterpolationMethod_Bogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Bogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_InterpolationMethod_Bogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_One_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_One_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_One_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_One_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_One_Key', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_Some_Keys', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Some_Keys', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Some_Keys', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Some_Keys', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Some_Keys', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_All_Keys', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_All_Keys', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_All_Keys', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_All_Keys', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_All_Keys', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_No_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_No_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_No_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_No_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_No_Key', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_Axis_Identifier_Bogus_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Bogus_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_Axis_Identifier_Bogus_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Bogus_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_Axis_Identifier_Bogus_Key', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]) = 0)"/>
          </xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="describe-min-result2">
            <xsl:choose>
              <xsl:when test="$url-get">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-get"/>
                  <ctl:with-param name="http-method" select="$http-get"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
              <xsl:when test="$url-xml">
                <ctl:call-function name="wcs:describe-coverage-minimal-request">
                  <ctl:with-param name="url" select="$url-xml"/>
                  <ctl:with-param name="http-method" select="$http-xml"/>
                  <ctl:with-param name="identifier" select="$identifier1"/>
                </ctl:call-function>
              </xsl:when>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">
            <xsl:value-of select="not($describe-min-result2/*[local-name()='ExceptionReport']) and not(string-length($describe-min-result2/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]) = 0)"/>
          </xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Formats', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Formats', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Formats', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Formats">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Formats', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Formats">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Formats', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Bogus_Format', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Bogus_Format', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Bogus_Format', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Bogus_Format">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Bogus_Format', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Bogus_Format">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Bogus_Format', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Empty_Format', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Empty_Format', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Empty_Format', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Empty_Format">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Empty_Format', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Empty_Format">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Empty_Format', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Missing_Format', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Missing_Format', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Missing_Format', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Missing_Format">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Missing_Format', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Missing_Format">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Missing_Format', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Store_True', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Store_True', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Store_True', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_True">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_True', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_True">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_True', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Store_False', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Store_False', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Store_False', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_False">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_False', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_False">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_False', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:variable name="UpdateSequenceOk">
            <xsl:value-of select="string-length($EqualUpdateSequenceValue) &gt; 0 or not(contains('Store_Bogus', 'UpdateSequence'))"/>
          </xsl:variable>
          <xsl:variable name="BogusSectionsOk">
            <xsl:value-of select="$sections-supported = 'true' or not(contains('Store_Bogus', 'Sections_Bogus'))"/>
          </xsl:variable>
          <xsl:variable name="StoreOk">
            <xsl:value-of select="$store-supported = 'true' or not(contains('Store_Bogus', 'Store_True'))"/>
          </xsl:variable>
          <xsl:variable name="FieldIdentifier2Ok">true</xsl:variable>
          <xsl:variable name="TemporalSubsetOk">true</xsl:variable>
          <xsl:choose>
            <xsl:when test="$url-get and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_Bogus">
                <ctl:with-param name="url" select="$url-get"/>
                <ctl:with-param name="http-method" select="$http-get"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_Bogus', ' with KVP encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="($xml-supported = 'true' or $xml-supported-alternate = 'true') and $UpdateSequenceOk = 'true' and $BogusSectionsOk = 'true' and $TemporalSubsetOk = 'true' and $StoreOk = 'true' and $FieldIdentifier2Ok = 'true'">
              <ctl:call-test xmlns="" name="wcs:GetCoverage_Store_Bogus">
                <ctl:with-param name="url" select="$url-xml"/>
                <ctl:with-param name="http-method" select="$http-xml"/>
                <ctl:with-param name="identifier1" select="$identifier1"/>
              </ctl:call-test>
            </xsl:when>
            <xsl:otherwise>
              <ctl:message xmlns="" select="concat('Test wcs:', 'GetCoverage', '_', 'Store_Bogus', ' with POST XML encoding skipped.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_MinimalRequest">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with only mandatory parameters is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 54. GetCoverage Minimal Request</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 10.2.1.1 Tables 21, 22 and 23.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_MissingIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing identifier parameter is submitted, the response is valid XML that validates against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 55. GetCoverage Missing Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22  and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Identifier but found
                                  <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_EmptyIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an empty identifier
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 56. GetCoverage Empty Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier"/>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier/><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Identifier but found
                                  <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_BogusIdentifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus identifier
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 57. GetCoverage Bogus Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">Bogus</ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>Bogus</ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Identifier but found
                                  <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_MissingBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing BoundingBox
           parameter is submitted, the response is valid XML that validates
           against the OWS Common 1.1.0 ExceptionReport schema.</ctl:assertion>
      <ctl:comment xmlns="">Table 58. GetCoverage Missing BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.2 Table 28.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' BoundingBox',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  BoundingBox but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_SurroundingBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox parameter
           which totally surrounds the CoverageDescription BoundingBox is
           submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 59. GetCoverage Surrounding BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat(xs:decimal($LowerCornerX) - $DeltaX, ',', xs:decimal($LowerCornerY) - $DeltaY, ',', xs:decimal($UpperCornerX) + $DeltaX, ',', xs:decimal($UpperCornerY) + $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat(xs:decimal($LowerCornerX) - $DeltaX, ' ', xs:decimal($LowerCornerY) - $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat(xs:decimal($UpperCornerX) + $DeltaX, ' ', xs:decimal($UpperCornerY) + $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_InsideBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter which is totally inside the CoverageDescription BoundingBox
           is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 60. GetCoverage Inside BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat(xs:decimal($LowerCornerX) + $DeltaX, ',', xs:decimal($LowerCornerY) + $DeltaY, ',', xs:decimal($UpperCornerX) - $DeltaX, ',', xs:decimal($UpperCornerY) - $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat(xs:decimal($LowerCornerX) + $DeltaX, ' ', xs:decimal($LowerCornerY) + $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat(xs:decimal($UpperCornerX) - $DeltaX, ' ', xs:decimal($UpperCornerY) - $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_OverlappingBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter which overlaps the CoverageDescription BoundingBox is
           submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 61. GetCoverage Overlapping BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat(xs:decimal($LowerCornerX) + $DeltaX, ',', xs:decimal($LowerCornerY) + $DeltaY, ',', xs:decimal($UpperCornerX) + $DeltaX, ',', xs:decimal($UpperCornerY) + $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat(xs:decimal($LowerCornerX) + $DeltaX, ' ', xs:decimal($LowerCornerY) + $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat(xs:decimal($UpperCornerX) + $DeltaX, ' ', xs:decimal($UpperCornerY) + $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <!-- The test removed with reference to issue #45. -->
    <!-- <ctl:test xmlns="" name="wcs:GetCoverage_BoundingBox_OutOfRangeCoordinates">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter with coordinate values which are out of range is submitted,
           the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 62. GetCoverage BoundingBox Out Of Range Coordinates</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat('-1e20,-1e20,1e20,1e20,', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>-1e20 -1e20</ows11:LowerCorner><ows11:UpperCorner>1e20 1e20</ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test> -->
    <ctl:test xmlns="" name="wcs:GetCoverage_OutsideBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter which is totally outside and not overlapping the
           CoverageDescription BoundingBox is submitted, the response may or may
           not be an exception. The specification does not define the allowed response.</ctl:assertion>
      <ctl:comment xmlns="">Table 63. GetCoverage Outside BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat(xs:decimal($LowerCornerX) + $LengthX + $DeltaX, ',', xs:decimal($LowerCornerY) + $LengthY + $DeltaY, ',', xs:decimal($UpperCornerX) + $LengthX + $DeltaX, ',', xs:decimal($UpperCornerY) + $LengthY + $DeltaY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="concat(xs:decimal($LowerCornerX) + $LengthX + $DeltaX, ' ', xs:decimal($LowerCornerY) + $LengthY + $DeltaY)"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="concat(xs:decimal($UpperCornerX) + $LengthX + $DeltaX, ' ', xs:decimal($UpperCornerY) + $LengthY + $DeltaY)"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_AntimeridianBoundingBox">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a BoundingBox
           parameter with coordinate values which span the antimeridian is
           submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 64. GetCoverage Antimeridian BoundingBox</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 7.6.2, 10.2.1.1 Tables 21, 22 and 23 and 10.3.6.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:link xmlns="" title="2: OGC 06-121r3 Subclause 10.2">http://www.opengeospatial.org/standards/wcs#OGC-06-121r3</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">179.5,10,-179.5,20,urn:ogc:def:crs:OGC:2:84</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>179.5 10</ows11:LowerCorner><ows11:UpperCorner>-179.5 20</ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePosition
           parameter from the CoverageDescription is submitted,
           the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 65. GetCoverage TemporalSubset TimePosition</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">
                      <xsl:value-of select="$TimePosition"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>
                              <xsl:value-of select="$TimePosition"/>
                            </gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Early">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an early TimePosition
           parameter is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 66. GetCoverage TemporalSubset TimePosition Early</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">
                      <xsl:value-of select="$TimePosition" />
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>
                              <xsl:value-of select="$TimePosition"/>
                            </gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePosition_Late">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a late TimePosition
           parameter is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 67. GetCoverage TemporalSubset TimePosition Late</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                       Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13 and  14; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">
                      <xsl:value-of select="$TimePosition"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>
                              <xsl:value-of select="$TimePosition"/>
                            </gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with TimePeriod BeginTime
           and EndTime parameters is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 68. GetCoverage TemporalSubset TimePeriod</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence">
                      <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/>
                      <xsl:value-of select="'/'"/>
                      <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition>
                              <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/>
                              <xsl:value-of select="'/'"/>
                              <xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/>
                            </gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod with
           resolution is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 69. GetCoverage TemporalSubset TimePeriod With Resolution</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                    Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="concat(substring($TimePosition, 1, 5), format-number(max((number(substring($TimePosition, 6, 2)) - 2, 1)), '00'), substring($TimePosition, 8))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 5), format-number(min((number(substring($TimePosition, 6, 2)) + 2, 12)), '00'), substring($TimePosition, 8))"/>/P1D</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="concat(substring($TimePosition, 1, 5), format-number(max((number(substring($TimePosition, 6, 2)) - 2, 1)), '00'), substring($TimePosition, 8))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 5), format-number(min((number(substring($TimePosition, 6, 2)) + 2, 12)), '00'), substring($TimePosition, 8))"/>/P1D</gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_With_Resolution_And_Frame">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod with
           resolution and frame is submitted, the response
           is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 70. GetCoverage TemporalSubset TimePeriod With Resolution And Frame</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                    Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; and 9.3.2.4.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="concat(substring($TimePosition, 1, 8), max((number(substring($TimePosition, 9, 2)) - 10, 1)), substring($TimePosition, 11))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 8), min((number(substring($TimePosition, 9, 2)) + 10, 28)), substring($TimePosition, 11))"/>/PT6H</ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="concat(substring($TimePosition, 1, 8), max((number(substring($TimePosition, 9, 2)) - 10, 1)), substring($TimePosition, 11))"/><xsl:value-of select="'/'"/><xsl:value-of select="concat(substring($TimePosition, 1, 8), min((number(substring($TimePosition, 9, 2)) + 10, 28)), substring($TimePosition, 11))"/>/PT6H</gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_BeginTime_Only">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod but just
           a BeginTime is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 71. GetCoverage TemporalSubset TimePeriod BeginTime Only</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; 9.3.2.4; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/><xsl:value-of select="'/'"/></ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) - 1, substring($TimePosition, 5))"/><xsl:value-of select="'/'"/></gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' EndTime',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  EndTime but found
                                     <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_TemporalSubset_TimePeriod_EndTime_Only">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a TimePeriod but
           just an EndTime is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 72. GetCoverage TemporalSubset TimePeriod EndTime Only</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 9.3.1.2 Tables 13,  14 and 15; 9.3.2.4; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="TimePosition"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='TemporalDomain']/*[local-name()='TimePeriod']/*[local-name()='BeginPosition']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="TimeSequence"><xsl:value-of select="'/'"/><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/></ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox><TemporalSubset>
                            <gml:timePosition><xsl:value-of select="'/'"/><xsl:value-of select="concat(number(substring($TimePosition, 1, 4)) + 1, substring($TimePosition, 5))"/></gml:timePosition>
                          </TemporalSubset></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' BeginTime',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  BeginTime but found
                                   <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a RangeSubset
           Identifier is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 73. GetCoverage RangeSubset Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; and 9.3.1.3 Tables 16 and 17.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'])[1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
              <ctl:param name="service">WCS</ctl:param>
              <ctl:param name="request">GetCoverage</ctl:param>
              <ctl:param name="version">1.1.1</ctl:param>
              <ctl:param name="identifier"><xsl:value-of select="$identifier1"/></ctl:param>
              <ctl:param name="BoundingBox"><xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/></ctl:param>
              <ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode($FieldIdentifier)"/></ctl:param>
              <ctl:param name="Format"><xsl:value-of select="$SupportedFormat"/></ctl:param>
              </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Multiple_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with RangeSubset
           Identifiers is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 74. GetCoverage RangeSubset Multiple Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; and 9.3.1.3 Tables 16 and 17.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
               <ctl:param name="RangeSubset">
               <xsl:if test="string-length($FieldIdentifier2) = 0">
                        <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                    </xsl:if>
                 <xsl:value-of select="wcs:encode(concat($FieldIdentifier1, ',', $FieldIdentifier2))"/></ctl:param>
                 <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                            <ctl:message select="concat('Length is ', string-length($FieldIdentifier2))"/>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier1"/>
                            </ows11:Identifier>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier2"/>
                            </ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Repeated_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a repeated RangeSubset
           Identifier is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 75. GetCoverage RangeSubset Repeated Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, ',', $FieldIdentifier))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Bogus_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus RangeSubset
           Identifier is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 76. GetCoverage RangeSubset Bogus Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset">Bogus</ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>Bogus</ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Valid_With_Bogus_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with one valid RangeSubset
           Identifier and one bogus Identifier is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 77. GetCoverage RangeSubset Valid With Bogus Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, ',Bogus'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <ows11:Identifier>Bogus</ows11:Identifier>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an InterpolationMethod
           is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 78. GetCoverage RangeSubset InterpolationMethod</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'])[1]"/></xsl:variable>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod'])[1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier,':',$InterpolationMethod))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <InterpolationType>
                              <xsl:value-of select="$InterpolationMethod"/>
                            </InterpolationType>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Missing">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a missing
           InterpolationMethod is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 79. GetCoverage RangeSubset InterpolationMethod Missing</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1; 10.3.2">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, ':'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <InterpolationType/>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="boolean($get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'])">
              <ctl:message>Error: Expected an exception</ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_InterpolationMethod_Bogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus
           InterpolationMethod is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 80. GetCoverage RangeSubset InterpolationMethod Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24 and 25; 9.3.1.3 Tables 16 and 17; H.3.1; 10.3.2">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, ':Bogus'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <InterpolationType>Bogus</InterpolationType>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="boolean($get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'])">
              <ctl:message>Error: Expected an exception</ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_One_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           one Axis Key is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 81. GetCoverage RangeSubset Axis Identifier One Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'])[1]"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier)[1]"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'])[1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, '[', $AxisIdentifier, '[', $AxisKey, ']]'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>
                                <xsl:value-of select="$AxisKey"/>
                              </Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Some_Keys">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           some Axis Keys is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 82. GetCoverage RangeSubset Axis Identifier Some Keys</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'])[1]"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier)[1]"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'])[1]"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'])[2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, '[', $AxisIdentifier, '[', $AxisKey1, ',', $AxisKey2, ']]'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>
                                <xsl:value-of select="$AxisKey1"/>
                              </Key>
                              <Key>
                                <xsl:value-of select="$AxisKey2"/>
                              </Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_All_Keys">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           all its Axis Keys is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 83. GetCoverage RangeSubset Axis Identifier All Keys</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; and 9.3.1.3 Tables 16, 17, 18 and 19">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'])[1]"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier)[1]"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'])[1]"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'])[2]"/></xsl:variable>
            <xsl:variable name="AxisKey3"><xsl:value-of select = "($describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'])[3]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, '[', $AxisIdentifier, '[', $AxisKey1, ',', $AxisKey2, ',', $AxisKey3, ']]'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>
                                <xsl:value-of select="$AxisKey1"/>
                              </Key>
                              <Key>
                                <xsl:value-of select="$AxisKey2"/>
                              </Key>
                              <Key>
                                <xsl:value-of select="$AxisKey3"/>
                              </Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_No_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           no Axis Key is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 84. GetCoverage RangeSubset Axis Identifier No Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 9.3.1.3 Tables 16, 17, 18 and 19; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, '[', $AxisIdentifier, ']'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / AxisSubset / Key',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / AxisSubset / Key but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_Axis_Identifier_Bogus_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an Axis Identifier and
           a bogus Axis Key is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 85. GetCoverage RangeSubset Axis Identifier Bogus Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier, '[', $AxisIdentifier, '[Bogus]]'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><RangeSubset>
                          <FieldSubset>
                            <ows11:Identifier>
                              <xsl:value-of select="$FieldIdentifier"/>
                            </ows11:Identifier>
                            <AxisSubset>
                              <Identifier>
                                <xsl:value-of select="$AxisIdentifier"/>
                              </Identifier>
                              <Key>Bogus</Key>
                            </AxisSubset>
                          </FieldSubset>
                        </RangeSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / AxisSubset / Key',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / AxisSubset / Key but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Colon_Between_Field_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a colon
           between Field Identifiers is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 86. GetCoverage RangeSubset KVP Syntax Colon Between Field Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:if test="string-length($FieldIdentifier2) = 0">
                        <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                      </xsl:if><xsl:value-of select="wcs:encode(concat($FieldIdentifier1,':',$FieldIdentifier2))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Comma_Between_Field_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a comma
           between Field Identifiers is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 87. GetCoverage RangeSubset KVP Syntax Comma Between Field Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="FieldIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:if test="string-length($FieldIdentifier2) = 0">
                        <ctl:message>FieldIdentifier2 is not found. Need to skip test.</ctl:message>
                      </xsl:if><xsl:value-of select="wcs:encode(concat($FieldIdentifier1,',',$FieldIdentifier2))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Field_Identifier_And_InterpolationMethod">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon
           between Field Identifier And InterpolationMethod is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 88. GetCoverage RangeSubset KVP Syntax Semicolon Between Field Identifier And InterpolationMethod</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="InterpolationMethod"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='InterpolationMethods']/*[local-name()='InterpolationMethod'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier1,';',$InterpolationMethod))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' FieldSubset / Identifier',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  FieldSubset / Identifier but found
                                    <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Identifiers">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon
           between Axis Identifiers is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 89. GetCoverage RangeSubset KVP Syntax Semicolon Between Axis Identifiers</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisIdentifier2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='Identifier'][2]"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier,'[',$AxisIdentifier1,'[',$AxisKey1,']',';',$AxisIdentifier2,'[',$AxisKey2,']',']'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Semicolon_Between_Axis_Keys">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a semicolon
           between Axis Keys is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 90. GetCoverage RangeSubset KVP Syntax Semicolon Between Axis Keys</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey1"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="AxisKey2"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][2]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier,'[',$AxisIdentifier,'[',$AxisKey1,';',$AxisKey2,']',']'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Identifier">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing
           opening square bracket before the axis identifier is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 91. GetCoverage RangeSubset KVP Syntax Missing  Opening Square Bracket Before Axis Identifier</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier,$AxisIdentifier,'[',$AxisKey,']',']'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Opening_Square_Bracket_Before_Axis_Key">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing
           opening square bracket before the axis key is submitted,
           the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 92. GetCoverage RangeSubset KVP Syntax Missing  Opening Square Bracket Before Axis Key</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier,'[',$AxisIdentifier,$AxisKey,']',']'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_RangeSubset_KVP_Syntax_Missing_Closing_Square_Bracket">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request using KVP with a missing
           closing square bracket is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 93. GetCoverage RangeSubset KVP Syntax Missing Closing Square Bracket</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2&#xA;                  Subclauses10.2.1.1 Tables 21, 22 and 23; 10.2.1.2 Tables 24, 25 and 26; 10.2.2.2; 9.3.1.3 Tables 16, 17, 18 and 19; and 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="FieldIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Identifier']"/></xsl:variable>
            <xsl:variable name="AxisIdentifier"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/@identifier"/></xsl:variable>
            <xsl:variable name="AxisKey"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Range']/*[local-name()='Field']/*[local-name()='Axis']/*[local-name()='AvailableKeys']/*[local-name()='Key'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'"><ctl:param name="service">WCS</ctl:param><ctl:param name="request">GetCoverage</ctl:param><ctl:param name="version">1.1.1</ctl:param><ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param><ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param><ctl:param name="RangeSubset"><xsl:value-of select="wcs:encode(concat($FieldIdentifier,'[',$AxisIdentifier,'[',$AxisKey,']'))"/></ctl:param><ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param></xsl:when>
                  <xsl:otherwise/>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' RangeSubset',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  RangeSubset but found
                                 <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Formats">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a format
           is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 94. GetCoverage Formats</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclause 10.2.1.1 Tables 21, 22 and 23.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Bogus_Format">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a bogus format
           is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 95. GetCoverage Bogus Format</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">Bogus</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="Bogus"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Format',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Format but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Empty_Format">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with an empty string for
           the format is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 96. GetCoverage Empty Format</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format=""/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Format',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Format but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Missing_Format">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with the format missing
           is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 97. GetCoverage Missing Format</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.3.2.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1">
                        <ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier>
                        <DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset>
                      </GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' Format',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  Format but found
                                      <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Store_True">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter set
           to true is submitted, the response is an exception or not depending
           on the capabilities.</ctl:assertion>
      <ctl:comment xmlns="">Table 98. GetCoverage Store True</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; 10.2.1.3; 8.3.2.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="Storable"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='store parameter']"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                    <ctl:param name="Store">true</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}" store="true"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Store_False">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter
           set to false is submitted, the response is not an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 99. GetCoverage Store False</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; and 10.2.1.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                    <ctl:param name="Store">false</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}" store="false"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                    <ctlp:HTTPParser>
                      <ctlp:parse>
                        <ctlp:NullParser part="2"/>
                      </ctlp:parse>
                    </ctlp:HTTPParser>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctlp:XMLValidatingParser>
                      <ctlp:schemas>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.1/wcsDescribeCoverage.xsd</ctlp:schema>
                        <ctlp:schema type="resource">xsd/ogc/wcs/1.1.3/wcsDescribeCoverage.xsd</ctlp:schema>
                      </ctlp:schemas>
                    </ctlp:XMLValidatingParser>
                  </xsl:otherwise>
                </xsl:choose>
              </ctl:request>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$http-method = 'GET' or $http-method = 'XML'">
                <xsl:if test="$get-coverage-result/response/status/@code != 200">
                  <ctl:message select="concat('Error: Returned a status code of ', $get-coverage-result/response/status/@code)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/headers/header[@Name='Content-Type']/@Name != $SupportedFormat">
                  <ctl:message select="concat('Error: Returned a format of ',  $get-coverage-result/response/content-type, ' but expected ', $SupportedFormat)"/>
                  <ctl:fail/>
                </xsl:if>
                <xsl:if test="$get-coverage-result/response/content/*[local-name()='ExceptionReport']">
                  <ctl:message select="concat('Error: ', $get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
                  <ctl:fail/>
                </xsl:if>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test xmlns="" name="wcs:GetCoverage_Store_Bogus">
      <ctl:param name="url"/>
      <ctl:param name="http-method"/>
      <ctl:param name="identifier1"/>
      <ctl:assertion xmlns="">Verify that when a GetCoverage request with a store parameter
           set to a bogus value is submitted, the response is an exception.</ctl:assertion>
      <ctl:comment xmlns="">Table 100. GetCoverage Store Bogus</ctl:comment>
      <ctl:link xmlns="" title="1: OGC 07-067r2 Subclauses 10.2.1.1 Tables 21, 22 and 23; and 10.2.1.3.">http://www.opengeospatial.org/standards/wcs#OGC-07-067r2</ctl:link>
      <ctl:code>
        <xsl:choose>
          <xsl:when test="$http-method = 'GET'">
            <ctl:message>Using KVP encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'XML'">
            <ctl:message>Using XML encoding.</ctl:message>
          </xsl:when>
          <xsl:when test="$http-method = 'SOAP'">
            <ctl:message>Using SOAP encoding.</ctl:message>
          </xsl:when>
          <xsl:otherwise>
            <ctl:message select="concat('Using ', $http-method, ' encoding.')"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="describe-min-result">
          <ctl:call-function name="wcs:describe-coverage-minimal-request">
            <ctl:with-param name="url" select="$url"/>
            <ctl:with-param name="http-method" select="$http-method"/>
            <ctl:with-param name="identifier" select="$identifier1"/>
          </ctl:call-function>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$describe-min-result/*[local-name()='ExceptionReport']">
            <ctl:message select="concat('A DescribeCoverage MinimalRequest initial test case failed. The error is ', $describe-min-result/*[local-name()='ExceptionReport']/*[local-name()='Exception']/*[local-name()='ExceptionText'])"/>
            <ctl:fail/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="BoundingBoxCRS">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/@crs"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">urn:ogc:def:crs:OGC:2:84</xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxLowerCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]//*[local-name()='LowerCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='LowerCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="BoundingBoxUpperCorner">
              <xsl:choose>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
                <xsl:when test="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]">
                  <xsl:value-of select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='WGS84BoundingBox'][1]/*[local-name()='UpperCorner']"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="LowerCornerX" select="substring-before($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="LowerCornerY" select="substring-after($BoundingBoxLowerCorner, ' ')"/>
            <xsl:variable name="UpperCornerX" select="substring-before($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="UpperCornerY" select="substring-after($BoundingBoxUpperCorner, ' ')"/>
            <xsl:variable name="LengthX" select="xs:decimal($UpperCornerX) - xs:decimal($LowerCornerX)"/>
            <xsl:variable name="LengthY" select="xs:decimal($UpperCornerY) - xs:decimal($LowerCornerY)"/>
            <xsl:variable name="DeltaX" select="$LengthX * 0.025"/>
            <xsl:variable name="DeltaY" select="$LengthY * 0.025"/>
            <xsl:variable name="SupportedFormat"><xsl:value-of select = "$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='SupportedFormat'][1]"/></xsl:variable>
            <xsl:variable name="GridBaseCRS" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridBaseCRS']"/>
            <xsl:variable name="GridOffsets" select="$describe-min-result/*[local-name()='CoverageDescriptions']/*[local-name()='CoverageDescription']/*[local-name()='Domain']/*[local-name()='SpatialDomain']/*[local-name()='GridCRS']/*[local-name()='GridOffsets']"/>
            <xsl:variable name="get-coverage-result">
              <ctl:request>
                <ctl:url>
                  <xsl:value-of select="$url"/>
                </ctl:url>
                <ctl:method>
                  <xsl:choose>
                    <xsl:when test="$http-method = 'GET'">GET</xsl:when>
                    <xsl:otherwise>POST</xsl:otherwise>
                  </xsl:choose>
                </ctl:method>
                <xsl:choose>
                  <xsl:when test="$http-method = 'GET'">
                    <ctl:param name="service">WCS</ctl:param>
                    <ctl:param name="request">GetCoverage</ctl:param>
                    <ctl:param name="version">1.1.1</ctl:param>
                    <ctl:param name="identifier">
                      <xsl:value-of select="$identifier1"/>
                    </ctl:param>
                    <ctl:param name="BoundingBox">
                      <xsl:value-of select="concat($LowerCornerX, ',', $LowerCornerY, ',', $UpperCornerX, ',', $UpperCornerY,  ',', $BoundingBoxCRS)"/>
                    </ctl:param>
                    <ctl:param name="Format">
                      <xsl:value-of select="$SupportedFormat"/>
                    </ctl:param>
                    <ctl:param name="Store">bogus</ctl:param>
                  </xsl:when>
                  <xsl:otherwise>
                    <ctl:body>
                      <GetCoverage xmlns="http://www.opengis.net/wcs/1.1.1" xmlns:gml="http://www.opengis.net/gml" xmlns:ows11="http://www.opengis.net/ows/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.opengis.net/wcs/1.1.1 http://schemas.opengis.net/wcs/1.1.1/wcsAll.xsd" service="WCS" version="1.1.1"><ows11:Identifier>
                          <xsl:value-of select="$identifier1"/>
                        </ows11:Identifier><DomainSubset><ows11:BoundingBox crs="{$BoundingBoxCRS}"><ows11:LowerCorner>
                              <xsl:value-of select="$BoundingBoxLowerCorner"/>
                            </ows11:LowerCorner><ows11:UpperCorner>
                              <xsl:value-of select="$BoundingBoxUpperCorner"/>
                            </ows11:UpperCorner></ows11:BoundingBox></DomainSubset><Output format="{$SupportedFormat}" store="bogus"/></GetCoverage>
                    </ctl:body>
                  </xsl:otherwise>
                </xsl:choose>
                <ctlp:XMLValidatingParser ignoreErrors="false" ignoreWarnings="false">
                  <ctlp:schemas>
                    <ctlp:schema type="resource">xsd/ogc/ows/1.1.0/owsExceptionReport.xsd</ctlp:schema>
                  </ctlp:schemas>
                </ctlp:XMLValidatingParser>
              </ctl:request>
            </xsl:variable>
            <xsl:if test="not(contains(' store',$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator))">
              <ctl:message>Error: Expected an exception with locator  store but found
                                       <xsl:value-of select="$get-coverage-result/response/content/*[local-name()='ExceptionReport']/*[local-name()='Exception'][@name='locator']/@locator"/></ctl:message>
              <ctl:fail/>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>   
</ctl:package>